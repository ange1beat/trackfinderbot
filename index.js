const TelegramApi = require('node-telegram-bot-api')



var Deezer = require('deezer-node-api');
var dz = new Deezer();



const token = '5506186121:AAGrM3HDEPRCQ_PKNQ87HZ-1OC0NQp-7q6I'

const bot = new TelegramApi(token, {polling: true})

//QIWI




/////

var a = {"–Å":"YO","–ô":"I","–¶":"TS","–£":"U","–ö":"K","–ï":"E","–ù":"N","–ì":"G","–®":"SH","–©":"SCH","–ó":"Z","–•":"H","–™":"'","—ë":"yo","–π":"i","—Ü":"ts","—É":"u","–∫":"k","–µ":"e","–Ω":"n","–≥":"g","—à":"sh","—â":"sch","–∑":"z","—Ö":"h","—ä":"'","–§":"F","–´":"I","–í":"V","–ê":"a","–ü":"P","–†":"R","–û":"O","–õ":"L","–î":"D","–ñ":"ZH","–≠":"E","—Ñ":"f","—ã":"i","–≤":"v","–∞":"a","–ø":"p","—Ä":"r","–æ":"o","–ª":"l","–¥":"d","–∂":"zh","—ç":"e","–Ø":"Ya","–ß":"CH","–°":"S","–ú":"M","–ò":"I","–¢":"T","–¨":"'","–ë":"B","–Æ":"YU","—è":"ya","—á":"ch","—Å":"s","–º":"m","–∏":"i","—Ç":"t","—å":"'","–±":"b","—é":"yu"};

function transliterate(word){
  return word.split('').map(function (char) { 
    return a[char] || char; 
  }).join("");
}



/// –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –ø–∏—Ç–æ–Ω








const {PythonShell} = require('python-shell')





let muz


////


const LastFM = require('last-fm')
const lastfm = new LastFM('2d4b23228d015d22e8b9b6b93f05f866', { userAgent: 'MyApp/1.0.0 (http://example.com)' })

const menuButtons = {
    reply_markup: JSON.stringify({
        inline_keyboard: [
            [{text: 'üîé–ö–ê–ö –ò–°–ö–ê–¢–¨ –ú–£–ó–´–ö–£üîé', callback_data: 'howFindMusic'}],
            // [{text: 'üí≠–ò–ù–õ–ê–ô–ù –†–ï–ñ–ò–úüí≠', callback_data: 'inlineMode'}],
            // [{text: 'üåü–ú–û–ò –ó–ê–ì–†–£–ó–ö–òüåü', callback_data: 'myDownloads'}],
            // [{text: 'üü£–û–¢–ö–õ–Æ–ß–ò–¢–¨ –†–ï–ö–õ–ê–ú–£üü£', callback_data: 'donations'}],
            [{text: '‚ù§Ô∏è–ö–û–ù–¢–ê–ö–¢–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø‚ù§Ô∏è', callback_data: 'otherBots'}],
        ]
    })
}

//–ø–æ–∏—Å–∫ –º—É–∑–ª–∞
let allData = []
let titleData3 = []
let linksData2 = []
let newkeyboard = []
let linksData = []
let trackButtons =  {
    reply_markup: JSON.stringify({
        inline_keyboard: newkeyboard
    })
}
let titleData = []

//—Å–∫–∞—á–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
let newkeyboard2 = []
let trackButtons2 = {
    reply_markup: JSON.stringify({
        inline_keyboard: newkeyboard2
    })
}
let titleData2 = []

//–º–æ–∏ –∑–∞–≥—Ä—É–∑–∫–∏

let myDown = []

let myDownTracks = {
    reply_markup: JSON.stringify({
        inline_keyboard: myDown
    })
}

let myDown2 = []

bot.setMyCommands([
    {command: '/start', description: '–ï—Å–ª–∏ –ø—Ä–æ–ø–∞–ª–∞ –∫–Ω–æ–ø–∫–∞ –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é'},
    // {command: '/inline', description: '–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Inline'},
])

//–ø—É—Ç—å –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
let albumName = []
let songName = []

let albumName2 = []
let songName2 = []
////

const start = () => {
    bot.on('message', async msg => {
        const text2 = msg.text;
        let text = transliterate(text2)
        const chatId = msg.chat.id;
    
        if (text === '/start') {
            const opts = {
                reply_markup: {
                    resize_keyboard: true,
                    one_time_keyboard: true,
                    keyboard: [
                      [{text: 'üåü–ú–ï–ù–Æüåü', callback_data: 'menu'}],
                    ],
                }
            };

            return bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç! –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ –∏/–∏–ª–∏ –∏–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è, —è –±—É–¥—É –∏—Å–∫–∞—Ç—å –º—É–∑—ã–∫—É`, opts)
        }
        if (text === '/inline') {
            return bot.sendVideo(chatId, './inlineuse.mp4', {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [{text: 'Inline - –ø–æ–∏—Å–∫üîé', switch_inline_query_current_chat: 'Morgenshtern'}]
                    ]
                }
            })

        }
        if (text === 'üåüMENYUüåü') {
            return bot.sendMessage(chatId, '–ú–ï–ù–Æ:', menuButtons)
        }
        //–æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–∑–ª–∞
        if (text === text) {
            
            dz.findTracks(text).then(function(result) {
                for (let i = 0; i < 5; i++) {
                    let numOfSong = String(i)
                    newkeyboard.push([{text: result.data[i].title, callback_data: numOfSong}])
                    linksData.push(result.data[i].link)
                    titleData.push(result.data[i].title)

                    ///–ø—É—Ç—å –¥–ª—è —Å–∫–∞—á–∫–∏
                    albumName2.push(result.data[i].album.title + ' - ' + result.data[i].artist.name)
                    songName2.push(result.data[i].title + ' - ' + result.data[i].artist.name + ' (128).mp3')
                    
                }
                trackButtons = {
                    reply_markup: JSON.stringify({
                        inline_keyboard: newkeyboard
                    })
                }
                linksData2 = linksData
                titleData3 = titleData

                ///–ø—É—Ç—å
                albumName = albumName2
                songName = songName2
                
                bot.sendMessage(chatId, `–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É ${text}:`, trackButtons)
                newkeyboard = []
                linksData = []
                titleData = []

                albumName2 = []
                songName2 = []
                
            });
        }
        
        //–æ—Ç–ø—Ä–∞–≤–∫–∞ –º—É–∑–ª–∞
    })

    bot.on('callback_query', msg => {
        const data = msg.data;
        const chatId = msg.message.chat.id;
        const message_id = msg.message.message_id
        bot.deleteMessage(chatId, message_id)
        
        //find tracks
        for (let i = 0; i < titleData3.length; i++) {
            let way = './'+'musics'+'/'+albumName[i]+'/'+songName[i]
            if (data == i) {
                const pyshell = new PythonShell('downloadMusic.py');
                pyshell.send(linksData2[i]);
                pyshell.on('message', function (message) {
                  console.log(message);
                });
                pyshell.end(async function (err,code,signal) {
                    console.log('finished');
                    await bot.sendAudio(chatId, way, {caption:'ü§ç@muzBotAngelBeatbot'})
                    let fs = require('fs');
                    await fs.rmSync('./'+'musics/'+albumName[i], { recursive: true, force: true });
                  });
                
                // bot.answerCallbackQuery(msg.id, '‚è≥–ò–¥–µ—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ...')
                bot.sendMessage(chatId, '‚è≥–ò–¥–µ—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ...')
                
                bot.deleteMessage(chatId, message_id)
            }
        }

        if (data === 'menu') {
            bot.sendMessage(chatId, '–ú–ï–ù–Æ:')
        }

        if (data === 'myDownloads') {
            bot.sendMessage(chatId, '–¢–≤–æ–∏ —Å–∫–∞—á–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏:', myDownTracks)
        }

        if (data === 'howFindMusic') {
            bot.sendMessage(chatId, '–ü—Ä–æ—Å—Ç–æ –≤–≤–æ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ –∏–ª–∏ –∏–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (–∏–ª–∏ –∏ —Ç–æ, –∏ –¥—Ä—É–≥–æ–µ) —è —Å–¥–µ–ª–∞—é –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ! üòâ\n\n–ï—Å–ª–∏ –±–æ—Ç –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç –º—É–∑—ã–∫—É - —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —Ç—ã –≤–≤–æ–¥–∏—à—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –∏–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —Å –æ–ø–µ—á–∞—Ç–∫–æ–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å –µ—â—ë —Ä–∞–∑.') 
        }
        if (data === 'inlineMode') {
            bot.sendVideo(chatId, './inlineuse.mp4', {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [{text: 'Inline - –ø–æ–∏—Å–∫üîé', switch_inline_query_current_chat: 'Morgenshtern'}]
                    ]
                }
            })
        }
    })

    // bot.on('inline_query', query => {
    //     const results = []
    //     for (let i = 0; i < 5; i++) {
    //         results.push({
    //             type: 'article',
    //             id: i.toString(),
    //             title: 'Title' + i,
    //             input_message_content: {
    //                 message_text: `Article #${i+1}`
    //             }
    //         })
    //     }
    //     bot.answerInlineQuery(query.id, results, {
    //         cache_time: 0
    //     })
    // })
}

start()